# Docker Compose configuration for MCP Host
# Optimized for Coolify deployment

version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-1.0.0}
    image: mcp-host-backend:${VERSION:-latest}
    container_name: mcp-host-backend
    restart: unless-stopped

    # Environment variables
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=sqlite:///./data/mcp_host.db
      - SECRET_KEY=${SECRET_KEY:-generate-random-secret-key-here}
      - DEBUG=false

      # OAuth settings for ChatGPT
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID:-}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-}
      - OAUTH_REDIRECT_URI=${OAUTH_REDIRECT_URI:-http://localhost:8000/auth/callback}

      # GitHub integration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}

      # CORS settings
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Performance
      - MAX_CONCURRENT_SERVERS=${MAX_CONCURRENT_SERVERS:-10}
      - SERVER_TIMEOUT=${SERVER_TIMEOUT:-30}

    # Volumes
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
      - mcp_servers:/app/mcp_servers

    # Ports (managed by Coolify)
    # ports:
    #   - "8000:8000"  # Coolify handles port mapping automatically

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

    # Networks
    networks:
      - mcp-network

  # Frontend Web Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        - BUILD_DATE=${BUILD_DATE:-}
        - VERSION=${VERSION:-1.0.0}
    image: mcp-host-frontend:${VERSION:-latest}
    container_name: mcp-host-frontend
    restart: unless-stopped

    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}

    # Ports (managed by Coolify)
    # ports:
    #   - "3000:3000"  # Coolify handles port mapping automatically

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Depends on backend
    depends_on:
      backend:
        condition: service_healthy

    # Networks
    networks:
      - mcp-network

  # Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: mcp-host-nginx
    restart: unless-stopped

    # Ports (managed by Coolify)
    # ports:
    #   - "80:80"    # Coolify handles port mapping and SSL termination
    #   - "443:443"  # Coolify manages reverse proxy automatically

    # Volumes
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_ssl:/etc/nginx/ssl

    # Depends on services
    depends_on:
      - backend
      - frontend

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

    # Networks
    networks:
      - mcp-network

# Volumes
volumes:
  backend_data:
    driver: local

  backend_logs:
    driver: local

  mcp_servers:
    driver: local

  nginx_ssl:
    driver: local

# Networks
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16