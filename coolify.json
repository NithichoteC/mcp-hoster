{
  "name": "MCP Host",
  "description": "Professional MCP Server Gateway - Connect any MCP server to any AI agent (ChatGPT, Claude, etc.)",
  "version": "1.0.0",
  "type": "docker-compose",
  "logo": "https://raw.githubusercontent.com/modelcontextprotocol/servers/main/docs/logo.png",
  "documentation": "https://github.com/your-org/mcp-host#readme",
  "tags": ["mcp", "ai", "chatgpt", "claude", "automation", "api", "gateway"],
  "author": {
    "name": "MCP Host Team",
    "email": "team@mcphost.com",
    "url": "https://mcphost.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/mcp-host.git"
  },
  "license": "MIT",
  "requirements": {
    "docker": ">=20.10.0",
    "docker-compose": ">=2.0.0",
    "memory": "2GB",
    "storage": "10GB"
  },
  "services": {
    "backend": {
      "name": "MCP Host API",
      "description": "FastAPI backend with MCP gateway functionality",
      "image": "mcp-host-backend",
      "ports": [
        {
          "internal": 8000,
          "external": 8000,
          "protocol": "http",
          "public": true
        }
      ],
      "environment": [
        {
          "key": "SECRET_KEY",
          "value": "",
          "required": true,
          "description": "Secret key for JWT tokens (generate a random string)"
        },
        {
          "key": "OAUTH_CLIENT_ID",
          "value": "",
          "required": false,
          "description": "OAuth2 client ID for ChatGPT integration"
        },
        {
          "key": "OAUTH_CLIENT_SECRET",
          "value": "",
          "required": false,
          "description": "OAuth2 client secret for ChatGPT integration"
        },
        {
          "key": "GITHUB_TOKEN",
          "value": "",
          "required": false,
          "description": "GitHub personal access token for repository integration"
        },
        {
          "key": "CORS_ORIGINS",
          "value": "*",
          "required": false,
          "description": "Allowed CORS origins (use * for development, specific domains for production)"
        }
      ],
      "volumes": [
        {
          "source": "mcp_host_data",
          "target": "/app/data",
          "description": "Database and application data"
        },
        {
          "source": "mcp_host_logs",
          "target": "/app/logs",
          "description": "Application logs"
        },
        {
          "source": "mcp_servers",
          "target": "/app/mcp_servers",
          "description": "MCP server installations"
        }
      ],
      "healthcheck": {
        "endpoint": "/health",
        "interval": "30s",
        "timeout": "10s",
        "retries": 3
      }
    },
    "frontend": {
      "name": "MCP Host Web Interface",
      "description": "Next.js web interface for managing MCP servers",
      "image": "mcp-host-frontend",
      "ports": [
        {
          "internal": 3000,
          "external": 3000,
          "protocol": "http",
          "public": true
        }
      ],
      "environment": [
        {
          "key": "NEXT_PUBLIC_API_URL",
          "value": "http://backend:8000",
          "required": true,
          "description": "Backend API URL (internal service communication)"
        },
        {
          "key": "NEXT_PUBLIC_WS_URL",
          "value": "ws://backend:8000",
          "required": true,
          "description": "WebSocket URL for real-time updates"
        }
      ],
      "depends_on": ["backend"],
      "healthcheck": {
        "endpoint": "/",
        "interval": "30s",
        "timeout": "10s",
        "retries": 3
      }
    },
    "nginx": {
      "name": "Reverse Proxy",
      "description": "Nginx reverse proxy for production deployment",
      "image": "nginx:alpine",
      "ports": [
        {
          "internal": 80,
          "external": 80,
          "protocol": "http",
          "public": true
        },
        {
          "internal": 443,
          "external": 443,
          "protocol": "https",
          "public": true
        }
      ],
      "volumes": [
        {
          "source": "./nginx/nginx.conf",
          "target": "/etc/nginx/nginx.conf",
          "readonly": true
        },
        {
          "source": "./nginx/default.conf",
          "target": "/etc/nginx/conf.d/default.conf",
          "readonly": true
        }
      ],
      "depends_on": ["backend", "frontend"]
    }
  },
  "deployment": {
    "strategy": "docker-compose",
    "production": {
      "domains": [
        {
          "domain": "your-domain.com",
          "service": "nginx",
          "port": 80
        }
      ],
      "ssl": {
        "enabled": true,
        "certificate": "lets-encrypt"
      },
      "environment": {
        "ENVIRONMENT": "production",
        "DEBUG": "false",
        "LOG_LEVEL": "INFO"
      }
    }
  },
  "monitoring": {
    "healthchecks": true,
    "logs": true,
    "metrics": true
  },
  "backup": {
    "enabled": true,
    "volumes": ["mcp_host_data", "mcp_host_logs"],
    "schedule": "0 2 * * *",
    "retention": "30d"
  },
  "features": [
    "Multi-transport MCP server support (STDIO, HTTP, SSE, Streamable HTTP)",
    "ChatGPT custom connector integration with OAuth2",
    "Claude Desktop compatibility",
    "GitHub repository auto-discovery",
    "n8n workflow automation integration",
    "Real-time server health monitoring",
    "Professional web management interface",
    "API key management",
    "Session tracking and analytics",
    "Comprehensive logging and debugging",
    "Docker-based deployment",
    "SSL/TLS support",
    "Rate limiting and security",
    "Automatic server restart and recovery"
  ],
  "quickstart": {
    "steps": [
      {
        "title": "Deploy with Coolify",
        "description": "Click deploy and wait for all services to start"
      },
      {
        "title": "Set Environment Variables",
        "description": "Configure SECRET_KEY and other required environment variables"
      },
      {
        "title": "Access Web Interface",
        "description": "Open the frontend URL to access the management interface"
      },
      {
        "title": "Add Your First MCP Server",
        "description": "Use the web interface to add servers from GitHub or configure n8n integration"
      },
      {
        "title": "Connect to ChatGPT",
        "description": "Use the provided OAuth2 endpoint to connect ChatGPT custom connectors"
      }
    ]
  }
}